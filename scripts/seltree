#!/usr/bin/perl
# Time-stamp: <2014/01/22 16:13:21 benavuya.ime.usp.br [benavuya] am>

use Getopt::Std;

sub usage {
print "Usage: smctree -j filename [OPTIONS]
      Select the SMC tree from the bst file.

      Options:               [default]
        -s  s          Start with tree s [1]
        -e  e          End with tree e [last]
";
}


getopts('hj:s:e:');
if ($opt_h || !$opt_j) {
  usage;
  exit;
}

$file = $opt_j;
$start = $opt_s || $start;
$end = $opt_e || $end;

if (!($file =~ /\.bst$/)) {
  $file .= '.bst';
}


open BST, "<$file" or die "$file not found or not readable.\n";

while (<BST>) {
  last if ! /#/;
  if (/sizes:/) {
    chomp;
    ($txt, $txt, $sizes, @ni) = split /[: ]+/;
  }  
  /resamples: (.*)/ and $nres = $1;
} 

print "sizes:$sizes  resamples:$nres\n";
print  join ":",@ni;
print "\n";

$bst[0][0]->[0] = [];
# slurps data
for ($line = 0; defined ($line); $line = <BST>) {
  # get tree num
  $line = <BST>;
  $line =~ /{(\d+)}/ or last;#die "$file :: $line format error\n";
  $treenum = $1;
  for ($siz = 0; $siz < $sizes; $siz++) {
    $line = <BST>;
    ($tam[$siz], @res) = split " ", $line;
    #print @res,"\n";
    $bst[$treenum][$siz] = [];
    push $bst[$treenum][$siz], @res;
    #print "[$treenum][$siz] ",join (" ",@{$bst[$treenum][$siz]}), "\n";
    #print "$bl $siz $dt[$bl][$siz]\n";
  }
}

#    print "\n\n\n",join (" ",@{$bst[3][0]}), "--- ",$bst[3][0][1],"\n";
#
#  for ($siz = 0; $siz < $sizes; $siz++) {
#    for ($i=0; $i < $nres; $i++) {
#      print $bst[3][$siz][$i], " ";
#    }
#    print "\n";
#  }

$delta[0][0][0]=0;
for ($tree = 1; $tree < $treenum - 1; $tree++) {
  print "{$tree}\n";
  for ($siz = 0; $siz < $sizes; $siz++) {
    print "[$siz] ";
    $av = 0;
    for ($i=0; $i < $nres; $i++) {
      $av += $delta[$tree][$siz][$i] = $bst[$tree][$siz][$i] - $bst[$tree+1][$siz][$i];
      printf "%5.2f",$delta[$tree][$siz][$i]/$delta[$tree][0][0];
#      printf "%5.2f",$delta[$tree][$siz][$i]/$delta[$tree][0][0]/($ni[$siz]/$ni[0])**0.9;
    }
    print " [",$av/$sizes/$delta[$tree][0][0],"]";
    print "\n";
  }
}


use Statistics::Test::WilcoxonRankSum;

for ($tree = 1; $tree < $treenum - 1; $tree++) {
   print "\n\n{$tree}\n";
   my $wilcox_test = Statistics::Test::WilcoxonRankSum->new();
   $wilcox_test->load_data(\@{$delta[$tree][0]},\@{$delta[$tree][$sizes-1]});
   $wilcox_test->summary();
 }
